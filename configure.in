dnl $Id$

AC_INIT(lib/libgadu.h)
AC_PREREQ(2.50)
AC_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S

AC_PATH_PROG(GMAKE, gmake, no)
if test "x$GMAKE" = "xno"; then
  AC_PATH_PROG(MAKE, make, no)
  if test "x$MAKE" = "xno"; then
    AC_MSG_ERROR([make ])
  fi
else
  MAKE="$GMAKE"
fi

AC_PATH_PROG(AR, ar, no)
if test "x$AR" = "xno"; then
  AC_MSG_ERROR([ar ])
fi

AC_PATH_PROG(STRIP, strip, :)

AC_NEED_STDINT_H
AC_C_BIGENDIAN

AC_SUBST(CFLAGS_LIBGADU)
AC_SUBST(LIBS_LIBGADU)

AC_SUBST(strip_ekg, "")
AC_SUBST(strip_ioctld, "")
AC_SUBST(strip_libgadu_so, "")

AC_SUBST(ioctld, "")
AC_SUBST(install_ioctld, "")

AC_SUBST(shared, "")
AC_SUBST(install_shared, "")

AC_SUBST(lgadu, "")

AC_SUBST(static, "static")
AC_SUBST(install_static, "install-static")

AC_SUBST(ekg, "")
AC_SUBST(install_ekg, "")
AC_SUBST(clean_ekg, "")
AC_SUBST(distclean_ekg, "")
AC_SUBST(uninstall_ekg, "")

AC_SUBST(make_ekgwap, "")
AC_SUBST(install_ekgwap, "")

AC_SUBST(OBJS, "")

# najpierw sprawdzamy te opcje, które s± wspólne dla libgadu i ekg.

AC_ARG_ENABLE(debug, 
  [  --disable-debug         Compile without debugging symbols and messages])

if test "x$enable_debug" = "xno"; then 
  CFLAGS="$CFLAGS -DGG_DEBUG_DISABLE"
  strip_ekg="strip-ekg"
  strip_ioctld="strip-ioctld"
  strip_libgadu_so="strip-libgadu-so"
else
  CFLAGS="$CFLAGS -ggdb" 
fi

dnl sparc libs...
AC_CHECK_LIB(nsl, t_accept, LIBS="$LIBS -lnsl")
AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

AC_CHECK_FUNCS([gethostbyname_r])

# zachowujemy opcje dla libgadu

CFLAGS_LIBGADU="$CFLAGS_LIBGADU $CFLAGS"
LIBS_LIBGADU="$LIBS_LIBGADU $LIBS"

# jak± wersjê libgadu kompilujemy?

AC_ARG_ENABLE(shared,
  [  --enable-shared         Compile shared version of libgadu])

lib_shared_enabled=no
  
if test "x$enable_shared" = "xyes"; then
  shared="shared"
  install_shared="install-shared"
  lib_shared_enabled=yes
fi

AC_ARG_ENABLE(static,
  [  --disable-static        Don't compile static version of libgadu

Optional ekg Features:])

lib_static_enabled=yes

if test "x$enable_static" = "xno"; then
  static=""
  install_static=""
  lib_static_enabled=no
fi

if test "x$enable_static" = "xno" -a "x$enable_shared" != "xyes"; then
  AC_MSG_ERROR([You must choose either static or shared version of libgadu.])
fi

AC_ARG_ENABLE(dynamic,
  [  --enable-dynamic        Link ekg dynamically with libgadu])

AC_MSG_CHECKING([for C99-compatible vsnprintf()])
AC_TRY_RUN(
 [#include <stdio.h>
 
  int main()
  {
    char tmp;
    return (snprintf(&tmp, sizeof(tmp), "test") != 4);
  }], [AC_DEFINE(HAVE_C99_VSNPRINTF, 1, [define if you have C99-aware vsnprintf])
  AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no])])

dnl <ekg>

# i zaczynamy wykrywaæ ¶mieci dla ekg

  # dirname - get rid of libgen
  AC_CHECK_HEADERS(libgen.h)
  AC_CHECK_FUNC(dirname, , [OBJS="$OBJS ../compat/dirname.o"])

  AC_ARG_ENABLE(ui-readline,
    [  --enable-ui-readline    Enable readline UI])

  AC_ARG_ENABLE(force-ncurses,
    [  --disable-force-ncurses Force use of ncurses UI])

  AC_ARG_ENABLE(ui-ncurses,
    [  --disable-ui-ncurses    Disable ncurses UI])

  if test "x$enable_ui_ncurses" != "xno"; then
    AC_DEFINE(WITH_UI_NCURSES, 1, [define if you want ui-ncurses])
    OBJS="$OBJS ui-ncurses.o"
    ui_ncurses_enabled=yes
    ui_ncurses_default=yes
  fi

  # je¶li nie chcemy ncurses, budujemy readline.
  
  if test "x$enable_ui_ncurses" = "xno" -a "x$enable_ui_readline" != "xno"; then
    enable_ui_readline=yes
  fi

  if test "x$enable_ui_readline" = "xyes"; then
    AC_DEFINE(WITH_UI_READLINE, 1, [define if you want ui-readline])
    OBJS="$OBJS ui-readline.o"
    ui_readline_enabled=yes
    ui_ncurses_default=no
    ui_readline_default=yes
  fi
  
  if test "x$enable_ui_readline" = "xyes" -a "x$enable_force_ncurses" = "xyes"; then 
    AC_DEFINE(WITH_FORCE_NCURSES, 1, [define if you want ui-ncurses as default])
    ui_ncurses_default=yes
    ui_readline_default=no
  fi
  
  if test "x$enable_ui_ncurses" != "xno"; then 
    AC_CHECK_NCURSES

    if test "x$have_ncurses" = "x"; then
      AC_MSG_ERROR([You need ncurses and ncurses-devel packages.])
    fi

    LDFLAGS="$LDFLAGS $CURSES_LIBS"
    CFLAGS="$CFLAGS $CURSES_INCLUDES"
  fi

  AC_ARG_WITH(termcap, 
    [  --without-termcap       Used to force ncurses for readline])

  if test "x$enable_ui_readline" = "xyes"; then
    if test "x$with_termcap" = "xno"; then
      TERMCAP_LIB=""
    else
      AC_CHECK_LIB(termcap, tgetent, [TERMCAP_LIB="-ltermcap"])
      LDFLAGS="$LDFLAGS $TERMCAP_LIB"
    fi

    if test "x$TERMCAP_LIB" = "x" -a "x$CURSES_LIBS" = "x"; then
      AC_CHECK_NCURSES
      LDFLAGS="$LDFLAGS $CURSES_LIBS"
      CFLAGS="$CFLAGS $CURSES_INCLUDES"
    fi
      
    AC_CHECK_READLINE

    if test "x$READLINE_LIBS" = "x"; then
      AC_MSG_ERROR([You need both readline and readline-devel packages.])
    fi

    LDFLAGS="$READLINE_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $READLINE_INCLUDES"

    AC_CHECK_FUNCS([rl_set_prompt rl_filename_completion_function rl_get_screen_size rl_set_key rl_bind_key_in_map])
  fi

  # sprawdzamy libgsm.so, <gsm.h> i <linux/soundcard.h>
  
  AC_ARG_WITH(libgsm,
    [  --without-libgsm        Compile without GSM support])

  if test "x$with_libgsm" != "xno"; then
    AC_CHECK_LIB(gsm, gsm_decode, [ 
      AC_CHECK_HEADERS(gsm.h, [
        have_gsm_h=yes
      ], [
        AC_CHECK_HEADERS(gsm/gsm.h, [
	  have_gsm_h=yes
	  CFLAGS="$CFLAGS -I/usr/include/gsm"
	])
      ])
      if test "x$have_gsm_h" = "xyes"; then
        AC_CHECK_HEADERS(linux/soundcard.h, [
          AC_DEFINE(HAVE_VOIP, 1, [define if you want VOIP support])
	  LDFLAGS="-lgsm $LDFLAGS"
	  OBJS="$OBJS voice.o"
	])
      fi
    ])
  fi

  # sprawdzamy pythona
    
  AC_CHECK_PYTHON
  
  if test "x$have_python" = "xtrue"; then
    OBJS="$OBJS python.o"
    LDFLAGS="$PYTHON_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $PYTHON_INCLUDES"
  fi

  # sprawdzamy openssl

  AC_CHECK_OPENSSL

  if test "x$have_openssl" = "xtrue"; then
    OBJS="$OBJS sim.o"
    LDFLAGS="$OPENSSL_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $OPENSSL_INCLUDES"
  fi

  # sprawdzamy libz.so, <zlib.h>
  
  AC_ARG_WITH(zlib,
    [  --without-zlib          Compile without zlib (compressed logs)])

  if test "x$with_zlib" != "xno"; then
    AC_CHECK_LIB(z, gzopen, [
      AC_CHECK_HEADERS(zlib.h, [
        AC_DEFINE(HAVE_ZLIB, 1, [define if you want compressed logs])
	LDFLAGS="-lz $LDFLAGS"
      ])
    ])
  fi

dnl   # sprawdzamy libbz2.so, <bzlib.h>
dnl   
dnl   AC_ARG_WITH(bzip2,
dnl     [  --without-bzip2         Compile without bzip2 (compressed logs)])
dnl 
dnl   if test "x$with_bzip2" != "xno"; then
dnl     AC_CHECK_LIB(bz2, BZ2_bzopen, [
dnl       AC_CHECK_HEADERS(bzlib.h, [
dnl         AC_DEFINE(HAVE_BZIP2)
dnl         LIBS="$LIBS -lbz2"
dnl       ])
dnl     ])
dnl   fi

  # sprawdzamy, czy u¿ytkownik chce ekgwap

  AC_ARG_ENABLE(wap,
    [  --enable-wap            Compile WAP gateway])

  if test "x$enable_wap" = "xyes"; then
    make_ekgwap="make-ekgwap"
    install_ekgwap="install-ekgwap"
    AC_DEFINE(WITH_WAP, 1, [define if you want "WAP" support])
  fi

  # sprawdzamy, czy system ma getopt_long

  AC_CHECK_FUNC(getopt_long, , [OBJS="$OBJS ../compat/getopt.o ../compat/getopt1.o"; CFLAGS="-I../compat $CFLAGS"])

  # sprawdzamy ioctld

  AC_ARG_ENABLE(ioctld,
    [  --enable-ioctld         Compile ioctld (Linux only)])

  if test "x$enable_ioctld" = "xyes"; then 
    AC_CHECK_HEADERS(linux/kd.h, [
      CFLAGS="$CFLAGS -DWITH_IOCTLD -DIOCTLD_PATH=\\\"${libexecdir}/ioctld\\\""
      ioctld="ioctld"
      install_ioctld="install-ioctld"
    ])
  fi

  # Wszystkie testy nale¿y dodawaæ POWY¯EJ testu ioctld, poniewa¿ w przypadku
  # jego powodzenia zawarto¶æ CFLAGS skutecznie blokuje dzia³anie gcc
  # odpalanego przez ./configure
  
  # ustawiamy opcje

  if test "x$enable_static" = "xno" -o "x$enable_dynamic" = "xyes"; then 
    lib_shared_default=yes
    lib_static_default=no
    lgadu="-lgadu"
  else
    OBJS="$OBJS ../lib/libgadu.a"
    lgadu=""
    lib_shared_default=no
    lib_static_default=yes
  fi
  ekg="ekg"
  install_ekg="install-ekg"
  clean_ekg="clean-ekg"
  distclean_ekg="distclean-ekg"
  uninstall_ekg="uninstall-ekg"

dnl </ekg>

AC_CONFIG_FILES(Makefile lib/Makefile examples/Makefile)
dnl <ekg>
AC_CONFIG_FILES(src/Makefile)
dnl </ekg>

AC_OUTPUT

echo
echo "configured options:"

if test "x$lib_static_enabled" = "xyes"; then
  if test "x$lib_static_default" = "xyes"; then
    echo " - static libgadu: enabled (default)"
  else
    echo " - static libgadu: enabled"
  fi
else
  echo " - static libgadu: disabled"
fi

if test "x$lib_shared_enabled" = "xyes"; then
  if test "x$lib_shared_default" = "xyes"; then
    echo " - shared libgadu: enabled (default)"
  else
    echo " - shared libgadu: enabled"
  fi
else
  echo " - shared libgadu: disabled"
fi

dnl <ekg>

if test "x$have_openssl" = "xtrue"; then
  echo " - openssl: enabled"
else
  echo " - openssl: disabled"
fi

if test "x$ui_readline_enabled" = "xyes"; then
  if test "x$ui_readline_default" = "xyes"; then
    echo " - ui-readline: enabled (default)"
  else
    echo " - ui-readline: enabled"
  fi
else
  echo " - ui-readline: disabled"
fi

if test "x$ui_ncurses_enabled" = "xyes"; then
  if test "x$ui_ncurses_default" = "xyes"; then
    echo " - ui-ncurses: enabled (default)"
  else
    echo " - ui-ncurses: enabled"
  fi
else
  echo " - ui-ncurses: disabled"
fi

echo
echo "******************************************************************"
echo "** Uwaga! Zmieniony zosta³ domy¶lny interfejs ekg z readline na **"
echo "** ncurses. Je¶li z jakiego¶ powodu chcesz u¿ywaæ poprzedniego  **"
echo "** interfejsu, uruchom ,,./configure --disable-ui-ncurses''     **"
echo "******************************************************************"
echo

dnl </ekg>

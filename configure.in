dnl $Id$

AC_INIT(lib/libgadu.h)
AC_PREREQ(2.50)
AC_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S

AC_PATH_PROG(GMAKE, gmake, no)
if test "x$GMAKE" = "xno"; then
  AC_PATH_PROG(MAKE, make, no)
  if test "x$MAKE" = "xno"; then
    AC_MSG_ERROR([make ])
  fi
else
  MAKE="$GMAKE"
fi

AC_PATH_PROG(AR, ar, no)
if test "x$AR" = "xno"; then
  AC_MSG_ERROR([ar ])
fi

AC_PATH_PROG(STRIP, strip, :)

AC_NEED_STDINT_H
AC_C_BIGENDIAN

AC_SUBST(CFLAGS_LIBGADU)
AC_SUBST(LIBS_LIBGADU)

AC_SUBST(strip_ekg, "")
AC_SUBST(strip_ioctld, "")
AC_SUBST(strip_libgadu_so, "")

AC_SUBST(ioctld, "")
AC_SUBST(install_ioctld, "")

AC_SUBST(shared, "")
AC_SUBST(install_shared, "")

AC_SUBST(libgadu_a, "")
AC_SUBST(lgadu, "")

AC_SUBST(static, "static")
AC_SUBST(install_static, "install-static")

AC_SUBST(ekg, "")
AC_SUBST(install_ekg, "")
AC_SUBST(clean_ekg, "")
AC_SUBST(distclean_ekg, "")
AC_SUBST(uninstall_ekg, "")

AC_SUBST(make_ekgwap, "")
AC_SUBST(install_ekgwap, "")

AC_SUBST(ui_readline_o, "")
AC_SUBST(ui_ncurses_o, "")

# najpierw sprawdzamy te opcje, które s± wspólne dla libgadu i ekg.

AC_ARG_ENABLE(debug, 
  [  --disable-debug         Compile without debugging symbols and messages])

if test "x$enable_debug" = "xno"; then 
  CFLAGS="$CFLAGS -DGG_DEBUG_DISABLE"
  strip_ekg="strip-ekg"
  strip_ioctld="strip-ioctld"
  strip_libgadu_so="strip-libgadu-so"
else
  CFLAGS="$CFLAGS -ggdb" 
fi

AC_CHECK_LIB(nsl, t_accept, LIBS="$LIBS -lnsl")
AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

# zachowujemy opcje dla libgadu

CFLAGS_LIBGADU="$CFLAGS_LIBGADU $CFLAGS"
LIBS_LIBGADU="$LIBS_LIBGADU $LIBS"

# jak± wersjê libgadu kompilujemy?

AC_ARG_ENABLE(shared,
  [  --enable-shared         Compile shared version of libgadu])
  
if test "x$enable_shared" = "xyes"; then
  shared="shared"
  install_shared="install-shared"
fi

AC_ARG_ENABLE(static,
  [  --disable-static        Don't compile static version of libgadu

Optional ekg Features:])

if test "x$enable_static" = "xno"; then
  static=""
  install_static=""
fi

if test "x$enable_static" = "xno" -a "x$enable_shared" != "xyes"; then
  AC_MSG_ERROR([You must choose either static or shared version of libgadu.])
fi

AC_ARG_ENABLE(dynamic,
  [  --enable-dynamic        Link ekg dynamically with libgadu])

# i zaczynamy wykrywaæ ¶mieci dla ekg

if test -d src; then

  AC_ARG_ENABLE(ui-readline,
    [  --disable-ui-readline   Disable readline UI])

  AC_ARG_ENABLE(ui-ncurses,
    [  --enable-ui-ncurses     Enable ncurses UI])

  if test "x$enable_ui_readline" != "xno"; then
    AC_DEFINE(WITH_UI_READLINE)
    ui_readline_o="ui-readline.o"
  fi

  if test "x$enable_ui_ncurses" = "xyes"; then
    AC_DEFINE(WITH_UI_NCURSES)
    ui_ncurses_o="ui-ncurses.o"
  fi
    
  if test "x$enable_ui_ncurses" = "xyes"; then 
    AC_CHECK_NCURSES

    if test "x$have_ncurses" = "x"; then
      AC_MSG_ERROR([You need ncurses and ncurses-devel packages.])
    fi

    LIBS="$LIBS $CURSES_LIBS"
    CFLAGS="$CFLAGS $CURSES_INCLUDES"
  fi

  AC_ARG_WITH(termcap, 
    [  --without-termcap       Used to force ncurses for readline])

  if test "x$enable_ui_readline" != "xno"; then
    if test "x$with_termcap" = "xno"; then
      TERMCAP_LIB=""
    else
      AC_CHECK_LIB(termcap, tgetent, TERMCAP_LIB=-ltermcap)
      LIBS="$LIBS $TERMCAP_LIB"
    fi

    if test "x$TERMCAP_LIB" = "x" -a "x$CURSES_LIBS" = "x"; then
      AC_CHECK_NCURSES
      LIBS="$LIBS $CURSES_LIBS"
      CFLAGS="$CFLAGS $CURSES_INCLUDES"
    fi
      
    AC_CHECK_READLINE

    if test "x$READLINE_LIBS" = "x"; then
      AC_MSG_ERROR([You need both readline and readline-devel packages.])
    fi

    LIBS="$READLINE_LIBS $LIBS"
    CFLAGS="$CFLAGS $READLINE_INCLUDES"

    AC_CHECK_FUNCS([rl_set_prompt rl_filename_completion_function rl_get_screen_size rl_set_key rl_bind_key_in_map])
  fi

  AC_ARG_WITH(libgsm,
    [  --without-libgsm        Compile without GSM support])

  if test "x$with_libgsm" != "xno"; then
    AC_CHECK_LIB(gsm, gsm_decode, [
      AC_CHECK_HEADERS([gsm.h linux/soundcard.h])
      LIBS="$LIBS -lgsm"])
  fi
 
  AC_CHECK_HEADERS(linux/kd.h, [have_linux_kd_h=yes])

  AC_ARG_ENABLE(wap,
    [  --enable-wap            Compile WAP gateway])

  if test "x$enable_wap" = "xyes"; then
    make_ekgwap="make-ekgwap"
    install_ekgwap="install-ekgwap"
    AC_DEFINE(WITH_WAP)
  fi

  AC_ARG_ENABLE(ioctld,
    [  --enable-ioctld         Compile ioctld (Linux only)])

  if test "x$enable_ioctld" = "xyes" -a "x$have_linux_kd_h" = "xyes"; then 
    CFLAGS="$CFLAGS -DWITH_IOCTLD -DIOCTLD_PATH=\\\"${libexecdir}/ioctld\\\""
    ioctld="ioctld"
    install_ioctld="install-ioctld"
  fi

  libgadu_a="../lib/libgadu.a"
  lgadu=""
  if test "x$enable_static" = "xno" -o "x$enable_dynamic" = "xyes"; then 
    libgadu_a=""
    lgadu="-lgadu"
  fi
  ekg="ekg"
  install_ekg="install-ekg"
  clean_ekg="clean-ekg"
  distclean_ekg="distclean-ekg"
  uninstall_ekg="uninstall-ekg"
fi

AC_CONFIG_FILES(Makefile lib/Makefile examples/Makefile)
if test -d src; then
  AC_CONFIG_FILES(src/Makefile)
fi

AC_OUTPUT


